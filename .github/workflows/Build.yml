name: CI & Deploy

on:
  pull_request:
  push:
    branches: [master]

permissions:
  contents: read
  pull-requests: write # fÃ¼r PR-Kommentar bei Fehlschlag

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -euo pipefail {0}

env:
  CI: true
  NEXT_TELEMETRY_DISABLED: 1
  NODE_ENV: production

jobs:
  quality:
    name: Lint Â· Format Â· Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node (LTS) + pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: ESLint
        run: pnpm run lint

      - name: Prettier check
        run: pnpm run format:check
        continue-on-error: false

      - name: Typecheck
        run: pnpm run typecheck # z.B. tsc --noEmit

      - name: Summarize quality
        if: always()
        run: |
          echo "## Quality" >> "$GITHUB_STEP_SUMMARY"
          echo "- ESLint: âœ…" >> "$GITHUB_STEP_SUMMARY"
          echo "- Prettier: âœ…" >> "$GITHUB_STEP_SUMMARY"
          echo "- Typecheck: âœ…" >> "$GITHUB_STEP_SUMMARY"

      - name: Notify on failure (PR only)
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const shortSha = context.sha.slice(0,7)
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            const msg = `ðŸš¨ Quality failed @ ${shortSha}. Details: ${runUrl}`
            await github.rest.issues.createComment({ ...context.issue, body: msg })

  unit:
    name: Unit Tests (matrix)
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        node: ["22.x", "24.x"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Unit tests with coverage
        run: pnpm run test -- --coverage
        # Vitest/Jest: passt zu deinem Projekt

      - name: Upload coverage
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node }}
          path: |
            coverage/**
            .vitest/**
            junit.xml
          if-no-files-found: ignore
          retention-days: 7

  build:
    name: Build Next.js
    runs-on: ubuntu-latest
    needs: [quality, unit]
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Restore Next.js cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.[tj]s', '**/*.[tj]sx') }}
          restore-keys: |
            ${{ runner.os }}-next-

      - name: Build
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: pnpm run build

      - name: Upload build artifact (standalone empfohlen)
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: |
            .next
            public
          if-no-files-found: error
          retention-days: 7

      - name: Notify on failure (PR only)
        if: ${{ failure() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const shortSha = context.sha.slice(0,7)
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            const msg = `ðŸš¨ Build failed @ ${shortSha}. Details: ${runUrl}`
            await github.rest.issues.createComment({ ...context.issue, body: msg })

  e2e:
    name: E2E (Playwright)
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        uses: microsoft/playwright-github-action@v1

      - name: Start app (prod)
        run: |
          pnpm run build
          pnpm run start & # sollte auf PORT=3000 laufen
          npx wait-on http://127.0.0.1:3000

      - name: Run E2E
        env:
          BASE_URL: http://127.0.0.1:3000
        run: pnpm run e2e

      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

  deploy:
    name: Deploy
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: [build, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: next-build
          path: ./

      # TODO: echte Deploy-Logik (z.B. Docker/SSH/Cloud)
      - name: Deploy (placeholder)
        run: echo "Deploy step here"
